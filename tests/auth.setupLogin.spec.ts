import { test as setup, expect, request } from '@playwright/test';
import fs from 'fs';

const authFile = 'playwright/.auth/user.json';

setup('authenticate via API and verify login', async ({ browser }) => {
  // 1. –î–µ–ª–∞–µ–º API login
  const apiContext = await request.newContext();
  const response = await apiContext.post('https://api.practicesoftwaretesting.com/users/login', {
    data: {
      email: 'customer@practicesoftwaretesting.com',
      password: 'welcome01',
    },
  });

  const body = await response.json();
  console.log('üì¶ Full response:', body);

  const token = body.access_token; // <-- –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', token);

  // 2. –°–æ–∑–¥–∞—ë–º –±—Ä–∞—É–∑–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
  const page = await browser.newPage();

  await page.goto('https://practicesoftwaretesting.com/');
  await page.evaluate((token) => {
    localStorage.setItem('auth-token', token); // ‚ö†Ô∏è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á!
  }, token);

  // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º state
  await page.context().storageState({ path: authFile });

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
  await page.goto('https://practicesoftwaretesting.com/account');
  await expect(page.getByTestId('page-title')).toContainText('My account');

  await browser.close();
});